"""Add question answer audit table

Revision ID: 206c44af0dc8
Revises: d6a31dbc299c
Create Date: 2025-08-22 18:59:45.064393

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '206c44af0dc8'
down_revision: Union[str, None] = 'd6a31dbc299c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_rfp_questions_rfp_request_id', table_name='rfp_questions')
    op.drop_table('rfp_questions')
    op.drop_index('idx_standard_answers_project_id', table_name='standard_answers')
    op.drop_index('idx_standard_answers_tenant_id', table_name='standard_answers')
    op.drop_table('standard_answers')
    op.drop_index('idx_rfp_requests_project_id', table_name='rfp_requests')
    op.drop_index('idx_rfp_requests_tenant_id', table_name='rfp_requests')
    op.drop_table('rfp_requests')
    op.drop_index('idx_project_qa_pairs_project_id', table_name='project_qa_pairs')
    op.drop_index('idx_project_qa_pairs_tenant_id', table_name='project_qa_pairs')
    op.drop_index('idx_projects_tenant_id', table_name='projects')
    op.drop_constraint('projects_tenant_id_fkey', 'projects', type_='foreignkey')
    op.create_foreign_key(None, 'projects', 'tenants', ['tenant_id'], ['id'])
    op.alter_column('questions', 'tenant_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Reference to the tenant who owns this question',
               existing_nullable=False)
    op.alter_column('questions', 'deal_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Reference to the deal this question belongs to',
               existing_nullable=False)
    op.alter_column('questions', 'document_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='Reference to the document this question was extracted from',
               existing_nullable=False)
    op.alter_column('questions', 'question_text',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='The actual question text extracted from the document',
               existing_nullable=False)
    op.alter_column('questions', 'answer_text',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='The answer to the question (filled manually or via LLM)',
               existing_nullable=True)
    op.alter_column('questions', 'extraction_confidence',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment=None,
               existing_comment='Confidence score (0.00-1.00) from LLM extraction',
               existing_nullable=True)
    op.alter_column('questions', 'answer_sources',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('questions', 'answer_source_filenames',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('questions', 'question_order',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Sequential order of this question within the document',
               existing_nullable=True)
    op.alter_column('questions', 'processing_status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Status of question processing: pending, processing, processed, error',
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('questions', 'processing_error',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Error message if question processing fails',
               existing_nullable=True)
    op.drop_index('idx_questions_answer_cell', table_name='questions')
    op.drop_index('idx_questions_answer_status', table_name='questions')
    op.drop_index('idx_questions_deal_id', table_name='questions')
    op.drop_index('idx_questions_document_id', table_name='questions')
    op.drop_index('idx_questions_document_type', table_name='questions')
    op.drop_index('idx_questions_order', table_name='questions')
    op.drop_index('idx_questions_processing_status', table_name='questions')
    op.drop_index('idx_questions_tenant_id', table_name='questions')
    op.drop_table_comment(
        'questions',
        existing_comment='Questions extracted from deal documents using LLM processing',
        schema=None
    )
    op.drop_index('idx_templates_tenant_id', table_name='templates')
    op.drop_constraint('templates_tenant_id_fkey', 'templates', type_='foreignkey')
    op.create_foreign_key(None, 'templates', 'tenants', ['tenant_id'], ['id'])
    op.drop_index('idx_users_tenant_id', table_name='users')
    op.drop_constraint('users_tenant_id_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'tenants', ['tenant_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_tenant_id_fkey', 'users', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_users_tenant_id', 'users', ['tenant_id'], unique=False)
    op.drop_constraint(None, 'templates', type_='foreignkey')
    op.create_foreign_key('templates_tenant_id_fkey', 'templates', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_templates_tenant_id', 'templates', ['tenant_id'], unique=False)
    op.create_table_comment(
        'questions',
        'Questions extracted from deal documents using LLM processing',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_questions_tenant_id', 'questions', ['tenant_id'], unique=False)
    op.create_index('idx_questions_processing_status', 'questions', ['processing_status'], unique=False)
    op.create_index('idx_questions_order', 'questions', ['document_id', 'question_order'], unique=False)
    op.create_index('idx_questions_document_type', 'questions', ['document_type'], unique=False)
    op.create_index('idx_questions_document_id', 'questions', ['document_id'], unique=False)
    op.create_index('idx_questions_deal_id', 'questions', ['deal_id'], unique=False)
    op.create_index('idx_questions_answer_status', 'questions', ['answer_status'], unique=False)
    op.create_index('idx_questions_answer_cell', 'questions', ['answer_cell_reference'], unique=False)
    op.alter_column('questions', 'processing_error',
               existing_type=sa.TEXT(),
               comment='Error message if question processing fails',
               existing_nullable=True)
    op.alter_column('questions', 'processing_status',
               existing_type=sa.VARCHAR(length=50),
               comment='Status of question processing: pending, processing, processed, error',
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('questions', 'question_order',
               existing_type=sa.INTEGER(),
               comment='Sequential order of this question within the document',
               existing_nullable=True)
    op.alter_column('questions', 'answer_source_filenames',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('questions', 'answer_sources',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('questions', 'extraction_confidence',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment='Confidence score (0.00-1.00) from LLM extraction',
               existing_nullable=True)
    op.alter_column('questions', 'answer_text',
               existing_type=sa.TEXT(),
               comment='The answer to the question (filled manually or via LLM)',
               existing_nullable=True)
    op.alter_column('questions', 'question_text',
               existing_type=sa.TEXT(),
               comment='The actual question text extracted from the document',
               existing_nullable=False)
    op.alter_column('questions', 'document_id',
               existing_type=sa.UUID(),
               comment='Reference to the document this question was extracted from',
               existing_nullable=False)
    op.alter_column('questions', 'deal_id',
               existing_type=sa.UUID(),
               comment='Reference to the deal this question belongs to',
               existing_nullable=False)
    op.alter_column('questions', 'tenant_id',
               existing_type=sa.UUID(),
               comment='Reference to the tenant who owns this question',
               existing_nullable=False)
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.create_foreign_key('projects_tenant_id_fkey', 'projects', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    op.create_index('idx_projects_tenant_id', 'projects', ['tenant_id'], unique=False)
    op.create_index('idx_project_qa_pairs_tenant_id', 'project_qa_pairs', ['tenant_id'], unique=False)
    op.create_index('idx_project_qa_pairs_project_id', 'project_qa_pairs', ['project_id'], unique=False)
    op.create_table('rfp_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('client_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='rfp_requests_created_by_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='rfp_requests_project_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='rfp_requests_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='rfp_requests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_rfp_requests_tenant_id', 'rfp_requests', ['tenant_id'], unique=False)
    op.create_index('idx_rfp_requests_project_id', 'rfp_requests', ['project_id'], unique=False)
    op.create_table('standard_answers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='standard_answers_created_by_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='standard_answers_project_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='standard_answers_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='standard_answers_pkey')
    )
    op.create_index('idx_standard_answers_tenant_id', 'standard_answers', ['tenant_id'], unique=False)
    op.create_index('idx_standard_answers_project_id', 'standard_answers', ['project_id'], unique=False)
    op.create_table('rfp_questions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('rfp_request_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('question_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generated_answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reviewed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rfp_request_id'], ['rfp_requests.id'], name='rfp_questions_rfp_request_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='rfp_questions_pkey')
    )
    op.create_index('idx_rfp_questions_rfp_request_id', 'rfp_questions', ['rfp_request_id'], unique=False)
    # ### end Alembic commands ###
